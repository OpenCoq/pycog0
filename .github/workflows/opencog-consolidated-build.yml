name: OpenCog Consolidated Build

# Implementation of the CircleCI configuration as GitHub Actions
# This workflow follows the exact structure and dependency order from the CircleCI config

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  packages: read

env:
  # Common configuration equivalent to CircleCI common config
  CCACHE_DIR: /ws/ccache
  MAKEFLAGS: -j2
  WORKING_DIRECTORY: /ws

jobs:
  # =================================================================
  # Foundation Layer - Core utilities
  # =================================================================
  
  cogutil:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/cogutil
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            python3-dev python3-pip doxygen valgrind cxxtest \
            pkg-config ccache curl

      - name: Start restoring ccache
        run: |
          mkdir -p /ws
          date +%d-%m-%Y > /tmp/date

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: /ws/ccache
          key: ccache-${{ hashFiles('/tmp/date') }}
          restore-keys: |
            ccache-

      - name: Checkout cogutil
        uses: actions/checkout@v4
        with:
          path: /ws/cogutil

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install CogUtil
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: cogutil-workspace
          path: |
            /ws/cogutil
            /ws/ccache

  # =================================================================
  # Core Layer - AtomSpace and extensions
  # =================================================================
  
  atomspace:
    runs-on: ubuntu-latest
    needs: cogutil
    container:
      image: ubuntu:22.04
      options: --user root
    services:
      opencog-postgres:
        image: postgres:13
        env:
          POSTGRES_USER: opencog_test
          POSTGRES_PASSWORD: cheese
          POSTGRES_DB: opencog_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      PGHOST: opencog-postgres
      PGUSER: opencog_test
      PGPASSWORD: cheese
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/atomspace
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            libpqxx-dev postgresql-client ghc libghc-*-dev stack \
            pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: cogutil-workspace
          path: /ws

      - name: Checkout AtomSpace
        run: |
          git clone --depth 1 https://github.com/opencog/atomspace .

      - name: Restore GHC Cache
        uses: actions/cache@v4
        with:
          path: /root/.stack
          key: ghc-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ runner.arch }}

      - name: Restore Haskell Deps Cache  
        uses: actions/cache@v4
        with:
          path: /ws/atomspace/opencog/haskell/.stack-work
          key: haskelldeps-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ hashFiles('/ws/atomspace/opencog/haskell/opencog-atomspace.cabal') }}-${{ runner.arch }}

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: Install CogUtil
        run: cd /ws/cogutil/build && make install && ldconfig

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check

      - name: Install AtomSpace
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Save GHC Cache
        uses: actions/cache/save@v4
        with:
          path: /root/.stack
          key: ghc-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ runner.arch }}

      - name: Save Haskell Deps Cache
        uses: actions/cache/save@v4
        with:
          path: /ws/atomspace/opencog/haskell/.stack-work
          key: haskelldeps-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ hashFiles('/ws/atomspace/opencog/haskell/opencog-atomspace.cabal') }}-${{ runner.arch }}

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: atomspace-workspace
          path: |
            /ws/atomspace
            /ws/ccache

  atomspace-rocks:
    runs-on: ubuntu-latest
    needs: atomspace
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/atomspace-rocks
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            librocksdb-dev pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig

      - name: Checkout AtomSpace Rocks
        run: |
          git clone --depth 1 https://github.com/opencog/atomspace-rocks .

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install AtomSpace Rocks
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: atomspace-rocks-workspace
          path: |
            /ws/atomspace-rocks
            /ws/ccache

  atomspace-restful:
    runs-on: ubuntu-latest
    needs: atomspace
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/atomspace-restful
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            libcpprest-dev pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig

      - name: Checkout AtomSpace RESTful
        run: |
          git clone --depth 1 https://github.com/opencog/atomspace-restful .

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install AtomSpace RESTful
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: atomspace-restful-workspace
          path: |
            /ws/atomspace-restful
            /ws/ccache

  # =================================================================
  # Logic Layer - Unification and reasoning
  # =================================================================
  
  unify:
    runs-on: ubuntu-latest
    needs: atomspace
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/unify
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig

      - name: Checkout Unify
        run: |
          git clone --depth 1 https://github.com/opencog/unify .

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install Unify
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: unify-workspace
          path: |
            /ws/unify
            /ws/ccache

  ure:
    runs-on: ubuntu-latest
    needs: [atomspace, unify]
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/ure
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            pkg-config ccache curl

      - name: Attach atomspace workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Attach unify workspace
        uses: actions/download-artifact@v4
        with:
          name: unify-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig
          cd /ws/unify/build && make install && ldconfig

      - name: Checkout URE
        run: |
          git clone --depth 1 https://github.com/opencog/ure .

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install URE
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: ure-workspace
          path: |
            /ws/ure
            /ws/ccache

  # =================================================================
  # Cognitive Systems Layer
  # =================================================================
  
  cogserver:
    runs-on: ubuntu-latest
    needs: atomspace
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/cogserver
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make -j2 install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: Checkout AtomSpace Storage
        run: |
          git clone --depth 1 https://github.com/opencog/atomspace-storage /ws/atomspace-storage
          mkdir -p /ws/atomspace-storage/build
          cd /ws/atomspace-storage/build && cmake .. && make -j2 && make -j2 install
          ldconfig

      - name: Checkout CogServer
        run: git clone --depth 1 https://github.com/opencog/cogserver .

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check

      - name: Install CogServer
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: cogserver-workspace
          path: |
            /ws/atomspace-storage
            /ws/cogserver
            /ws/ccache

  attention:
    runs-on: ubuntu-latest
    needs: [atomspace, cogserver]
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/attention
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            ghc libghc-*-dev stack pkg-config ccache curl

      - name: Attach atomspace workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Attach cogserver workspace
        uses: actions/download-artifact@v4
        with:
          name: cogserver-workspace
          path: /ws

      - name: Restore GHC Cache
        uses: actions/cache@v4
        with:
          path: /root/.stack
          key: ghc-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ runner.arch }}

      - name: Restore Haskell Deps Cache
        uses: actions/cache@v4
        with:
          path: /ws/atomspace/opencog/haskell/.stack-work
          key: haskelldeps-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ hashFiles('/ws/atomspace/opencog/haskell/opencog-atomspace.cabal') }}-${{ runner.arch }}

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig
          cd /ws/atomspace-storage/build && make install && ldconfig
          cd /ws/cogserver/build && make install && ldconfig

      - name: Checkout Attention
        run: git clone --depth 1 https://github.com/opencog/attention .

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install Attention
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: attention-workspace
          path: |
            /ws/attention
            /ws/ccache

  spacetime:
    runs-on: ubuntu-latest
    needs: atomspace
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/spacetime
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            liboctomap-dev pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig

      - name: Checkout SpaceTime
        run: git clone --depth 1 https://github.com/opencog/spacetime .

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install SpaceTime
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: spacetime-workspace
          path: |
            /ws/spacetime
            /ws/ccache

  # =================================================================
  # Advanced Systems Layer
  # =================================================================
  
  pln:
    runs-on: ubuntu-latest
    needs: [atomspace, ure, spacetime]
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/pln
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            liboctomap-dev pkg-config ccache curl

      - name: Attach atomspace workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Attach ure workspace
        uses: actions/download-artifact@v4
        with:
          name: ure-workspace
          path: /ws

      - name: Attach spacetime workspace
        uses: actions/download-artifact@v4
        with:
          name: spacetime-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig
          cd /ws/unify/build && make install && ldconfig
          cd /ws/ure/build && make install && ldconfig
          cd /ws/spacetime/build && make install && ldconfig

      - name: Checkout PLN
        run: git clone --depth 1 https://github.com/opencog/pln .

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install PLN
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: pln-workspace
          path: |
            /ws/pln
            /ws/ccache

  miner:
    runs-on: ubuntu-latest
    needs: [atomspace, ure]
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/miner
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            ghc libghc-*-dev stack pkg-config ccache curl

      - name: Attach atomspace workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Attach ure workspace
        uses: actions/download-artifact@v4
        with:
          name: ure-workspace
          path: /ws

      - name: Restore GHC Cache
        uses: actions/cache@v4
        with:
          path: /root/.stack
          key: ghc-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ runner.arch }}

      - name: Restore Haskell Deps Cache
        uses: actions/cache@v4
        with:
          path: /ws/atomspace/opencog/haskell/.stack-work
          key: haskelldeps-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ hashFiles('/ws/atomspace/opencog/haskell/opencog-atomspace.cabal') }}-${{ runner.arch }}

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig
          cd /ws/unify/build && make install && ldconfig
          cd /ws/ure/build && make install && ldconfig

      - name: Checkout Miner
        run: git clone --depth 1 https://github.com/opencog/miner .

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install Miner
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: miner-workspace
          path: |
            /ws/miner
            /ws/ccache

  # =================================================================
  # Learning Systems Layer
  # =================================================================
  
  moses:
    runs-on: ubuntu-latest
    needs: cogutil
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/moses
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            libmpi-dev pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: cogutil-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig

      - name: Checkout MOSES
        run: git clone --depth 1 https://github.com/opencog/moses .

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install MOSES
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: moses-workspace
          path: |
            /ws/moses
            /ws/ccache

  asmoses:
    runs-on: ubuntu-latest
    needs: [atomspace, ure]
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/asmoses
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            pkg-config ccache curl

      - name: Attach atomspace workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Attach ure workspace
        uses: actions/download-artifact@v4
        with:
          name: ure-workspace
          path: /ws

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig
          cd /ws/unify/build && make install && ldconfig
          cd /ws/ure/build && make install && ldconfig

      - name: Checkout AS-MOSES
        run: git clone --depth 1 https://github.com/opencog/asmoses .

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Install
        run: cd build && make install

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: asmoses-workspace
          path: |
            /ws/asmoses

  # =================================================================
  # Language Processing Layer
  # =================================================================
  
  lg-atomese:
    runs-on: ubuntu-latest
    needs: atomspace
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/lg-atomese
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig

      - name: Checkout LG-Atomese
        run: git clone --depth 1 https://github.com/opencog/lg-atomese .

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install LG-Atomese
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: lg-atomese-workspace
          path: |
            /ws/lg-atomese
            /ws/ccache

  learn:
    runs-on: ubuntu-latest
    needs: [atomspace, cogserver]
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/learn
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            pkg-config ccache curl

      - name: Attach atomspace workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Attach cogserver workspace
        uses: actions/download-artifact@v4
        with:
          name: cogserver-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig
          cd /ws/cogserver/build && make install && ldconfig

      - name: Checkout Learn
        run: git clone --depth 1 https://github.com/opencog/learn .

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install Learn
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: learn-workspace
          path: |
            /ws/learn
            /ws/ccache

  language-learning:
    runs-on: ubuntu-latest
    needs: cogutil
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/language-learning
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            python3-dev python3-pip python3-nose pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: cogutil-workspace
          path: /ws

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig

      - name: Checkout Language Learning
        run: git clone --depth 1 https://github.com/opencog/language-learning .

      - name: Placeholder for Language Learning
        run: echo "Language Learning placeholder"

      - name: Print test log
        if: always()
        run: echo "Language Learning test completed"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: language-learning-workspace
          path: |
            /ws/language-learning

  # =================================================================
  # Integration Layer - Main OpenCog
  # =================================================================
  
  opencog:
    runs-on: ubuntu-latest
    needs: [atomspace, cogserver, attention, ure, lg-atomese]
    container:
      image: ubuntu:22.04
      options: --user root
    env:
      CCACHE_DIR: /ws/ccache
    defaults:
      run:
        working-directory: /ws/opencog
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            ghc libghc-*-dev stack pkg-config ccache curl

      - name: Attach atomspace workspace
        uses: actions/download-artifact@v4
        with:
          name: atomspace-workspace
          path: /ws

      - name: Attach cogserver workspace
        uses: actions/download-artifact@v4
        with:
          name: cogserver-workspace
          path: /ws

      - name: Attach attention workspace
        uses: actions/download-artifact@v4
        with:
          name: attention-workspace
          path: /ws

      - name: Attach ure workspace
        uses: actions/download-artifact@v4
        with:
          name: ure-workspace
          path: /ws

      - name: Attach lg-atomese workspace
        uses: actions/download-artifact@v4
        with:
          name: lg-atomese-workspace
          path: /ws

      - name: Restore GHC Cache
        uses: actions/cache@v4
        with:
          path: /root/.stack
          key: ghc-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ runner.arch }}

      - name: Restore Haskell Deps Cache
        uses: actions/cache@v4
        with:
          path: /ws/atomspace/opencog/haskell/.stack-work
          key: haskelldeps-${{ hashFiles('/ws/atomspace/opencog/haskell/stack.yaml') }}-${{ hashFiles('/ws/atomspace/opencog/haskell/opencog-atomspace.cabal') }}-${{ runner.arch }}

      - name: Set number of make jobs
        run: echo "export MAKEFLAGS=-j2" >> $BASH_ENV

      - name: Install previous dependencies
        run: |
          cd /ws/cogutil/build && make install && ldconfig
          cd /ws/atomspace/build && make install && ldconfig
          cd /ws/atomspace-storage/build && make install && ldconfig
          cd /ws/cogserver/build && make install && ldconfig
          cd /ws/attention/build && make install && ldconfig
          cd /ws/unify/build && make install && ldconfig
          cd /ws/ure/build && make install && ldconfig
          cd /ws/lg-atomese/build && make -j2 install && ldconfig

      - name: Checkout OpenCog
        run: git clone --depth 1 https://github.com/opencog/opencog .

      - name: CMake Configure
        run: mkdir build && cd build && cmake ..

      - name: Build
        run: cd build && make

      - name: Build tests
        run: cd build && make tests

      - name: Run tests
        run: cd build && make check ARGS="$MAKEFLAGS"

      - name: Install OpenCog
        run: cd build && make install && ldconfig

      - name: Print test log
        if: always()
        run: cat build/tests/Testing/Temporary/LastTest.log || echo "No test log found"

      - name: Persist workspace
        uses: actions/upload-artifact@v4
        with:
          name: opencog-workspace
          path: |
            /ws/opencog
            /ws/ccache

  # =================================================================
  # Packaging and Deployment
  # =================================================================
  
  package:
    runs-on: ubuntu-latest
    needs: opencog
    if: github.ref == 'refs/heads/master'
    container:
      image: ubuntu:22.04
      options: --user root
    defaults:
      run:
        working-directory: /ws/cogutil
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y git build-essential cmake pkg-config ccache curl

      - name: Attach workspace
        uses: actions/download-artifact@v4
        with:
          name: opencog-workspace
          path: /ws

      - name: Build Debian package
        run: cd build && make install && make package

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: /ws/cogutil/build/packages/

      - name: Start storing ccache
        run: date +%d-%m-%Y > /tmp/date

      - name: Save ccache
        uses: actions/cache/save@v4
        with:
          key: ccache-${{ hashFiles('/tmp/date') }}
          path: /ws/ccache