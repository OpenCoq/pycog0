---
name: CogML CI Build (Self-Healing)

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

env:
  # Self-healing CI configuration
  COGML_AUTO_FIX_ENABLED: "true"
  COGML_MAX_FIX_ATTEMPTS: "3"
  COGML_ESCALATION_ENABLED: "true"

jobs:
  # ==== Self-Healing CI Demonstration ====
  self-healing-demo:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install cython

      - name: Setup Self-Healing Environment
        run: |
          # Make auto-fix script executable
          chmod +x scripts/auto_fix.py

          # Create artifacts directory
          mkdir -p ci_artifacts

          echo "🧠 Self-Healing CI System Initialized"
          echo "Max attempts: $COGML_MAX_FIX_ATTEMPTS"
          echo "Auto-fix enabled: $COGML_AUTO_FIX_ENABLED"

      - name: Test Self-Healing Capability
        run: |
          echo "🧪 Testing self-healing system..."
          python3 scripts/test_auto_fix.py

      - name: Demonstrate Auto-Fix on Real Cython Error
        run: |
          echo "🔧 Demonstrating auto-fix on real Cython compilation..."

          # Try to compile a known problematic Cython file
          cd atomspace/opencog/cython/opencog

          # First attempt - this will likely fail
          if python3 -m cython --cplus atom.pyx 2>&1 | tee /tmp/cython_build.log; then
            echo "✅ Cython compilation successful on first try!"
          else
            echo "❌ Cython compilation failed as expected"
            echo "🤖 Activating self-healing system..."

            # Use our auto-fix script to attempt repairs
            cd /home/runner/work/opencog-org/opencog-org
            python3 scripts/auto_fix.py \
              --build-cmd "python3 -m cython --cplus atomspace/opencog/cython/opencog/atom.pyx" \
              --max-attempts 2 \
              --repo-root .
          fi
        continue-on-error: true

      - name: Upload Self-Healing Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: self-healing-artifacts
          path: |
            ci_artifacts/
            /tmp/cython_build.log

      - name: Report Self-Healing Results
        if: always()
        run: |
          echo "📊 Self-Healing CI Report"
          echo "=========================="

          if [ -f "ci_artifacts/success_report.json" ]; then
            echo "✅ Self-healing was successful!"
            cat ci_artifacts/success_report.json
          elif [ -f "ci_artifacts/escalation_report.json" ]; then
            echo "🚨 Self-healing escalated to human review"
            cat ci_artifacts/escalation_report.json
          else
            echo "ℹ️  Self-healing demonstration completed"
          fi

          # List all artifacts generated
          echo ""
          echo "Generated artifacts:"
          find ci_artifacts/ -type f 2>/dev/null || echo "No artifacts generated"

  # ==== Foundation ====
  cogutil:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev python3-nose valgrind doxygen

      - name: Build cogutil
        run: |
          cd cogutil
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)

      - name: Test cogutil
        run: |
          cd cogutil/build
          make test || true

      - name: Install cogutil
        run: |
          cd cogutil/build
          sudo make install
          sudo ldconfig

      - name: Cache cogutil build
        uses: actions/cache@v4
        with:
          path: cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}

  # ==== Core AtomSpace ====
  atomspace:
    runs-on: ubuntu-latest
    needs: [cogutil]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev guile-3.0-dev cython3 python3-nose valgrind doxygen

      - name: Restore cogutil cache
        uses: actions/cache@v4
        with:
          path: cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}

      - name: Install cogutil
        run: |
          cd cogutil/build
          sudo make install
          sudo ldconfig

      - name: Build AtomSpace
        run: |
          cd atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)

      - name: Test AtomSpace
        run: |
          cd atomspace/build
          make test || true

      - name: Install AtomSpace
        run: |
          cd atomspace/build
          sudo make install
          sudo ldconfig

      - name: Cache atomspace build
        uses: actions/cache@v4
        with:
          path: atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}

  # ==== AtomSpace Storage ====
  atomspace-storage:
    runs-on: ubuntu-latest
    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev librocksdb-dev guile-3.0-dev cython3 python3-nose valgrind doxygen

      - name: Install Cython
        run: python3 -m pip install --upgrade pip cython

      - name: Verify Cython Installation
        run: python3 -m cython --version

      - name: Restore cogutil cache
        uses: actions/cache@v4
        with:
          path: cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-

      - name: Restore atomspace cache
        uses: actions/cache@v4
        with:
          path: atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-

      - name: Build and install cogutil
        run: |
          cd cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and install atomspace
        run: |
          cd atomspace
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build AtomSpace Storage
        run: |
          cd atomspace-storage
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python3)
          make -j$(nproc)

      - name: Test AtomSpace Storage
        run: |
          cd atomspace-storage/build
          make test || true

      - name: Install AtomSpace Storage
        run: |
          cd atomspace-storage/build
          sudo make install
          sudo ldconfig

  # ==== Logic ====
  ure:
    runs-on: ubuntu-latest
    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev guile-3.0-dev cython3 python3-nose valgrind doxygen

      - name: Install Cython
        run: python3 -m pip install --upgrade pip cython

      - name: Verify Cython Installation
        run: python3 -m cython --version

      - name: Restore cogutil cache
        uses: actions/cache@v4
        with:
          path: cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-

      - name: Restore atomspace cache
        uses: actions/cache@v4
        with:
          path: atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-

      - name: Build and install cogutil
        run: |
          cd cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and install atomspace
        run: |
          cd atomspace
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and install unify
        run: |
          git clone --depth 1 https://github.com/opencog/unify /tmp/unify
          cd /tmp/unify
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build URE
        run: |
          cd ure
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python3)
          make -j$(nproc)

      - name: Test URE
        run: |
          cd ure/build
          make test || true

      - name: Install URE
        run: |
          cd ure/build
          sudo make install
          sudo ldconfig

      - name: Cache ure build
        uses: actions/cache@v4
        with:
          path: ure/build
          key: ure-${{ runner.os }}-${{ github.sha }}

  # ==== Advanced ====
  pln:
    runs-on: ubuntu-latest
    needs: [ure]
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev guile-3.0-dev python3-nose valgrind doxygen liboctomap-dev

      - name: Install Cython
        run: python3 -m pip install --upgrade pip cython

      - name: Verify Cython Installation
        run: python3 -m cython --version

      - name: Restore cogutil cache
        uses: actions/cache@v4
        with:
          path: cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-

      - name: Restore atomspace cache
        uses: actions/cache@v4
        with:
          path: atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-

      - name: Build and install cogutil
        run: |
          cd cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and install atomspace
        run: |
          cd atomspace
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and install unify
        run: |
          git clone --depth 1 https://github.com/opencog/unify /tmp/unify
          cd /tmp/unify
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and install URE
        run: |
          cd ure
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and install SpaceTime
        run: |
          cd spacetime
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build PLN
        run: |
          cd pln
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)

      - name: Test PLN
        run: |
          cd pln/build
          make test || true

  # ==== Server Infrastructure ====
  cogserver:
    runs-on: ubuntu-latest
    needs: [atomspace-storage]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev guile-3.0-dev libssl-dev cython3 python3-nose python3-dev valgrind doxygen
          
      - name: Install Cython
        run: python3 -m pip install --upgrade pip cython

      - name: Verify Cython Installation
        run: python3 -m cython --version
          
      - name: Restore cogutil cache
        uses: actions/cache@v4
        with:
          path: cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v4
        with:
          path: atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          cd cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          cd atomspace
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install cogserver
        run: |
          cd cogserver
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Test cogserver
        run: |
          cd cogserver/build
          make test || true

      - name: Cache cogserver build
        uses: actions/cache@v4
        with:
          path: cogserver/build
          key: cogserver-${{ runner.os }}-${{ github.sha }}

  # ==== Spatiotemporal ====
  spacetime:
    runs-on: ubuntu-latest
    needs: [cogserver]
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev liboctomap-dev python3-nose valgrind doxygen

      - name: Restore cogutil cache
        uses: actions/cache@v4
        with:
          path: cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-

      - name: Build and install cogutil
        run: |
          cd cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build SpaceTime
        run: |
          cd spacetime
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)

      - name: Test SpaceTime
        run: |
          cd spacetime/build
          make test || true

      - name: Install SpaceTime
        run: |
          cd spacetime/build
          sudo make install
          sudo ldconfig

      - name: Cache spacetime build
        uses: actions/cache@v4
        with:
          path: spacetime/build
          key: spacetime-${{ runner.os }}-${{ github.sha }}

  # ==== Attention ====
  attention:
    runs-on: ubuntu-latest
    needs: [ure]
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev guile-3.0-dev cython3 python3-nose valgrind doxygen

      - name: Install Cython
        run: python3 -m pip install --upgrade pip cython

      - name: Verify Cython Installation
        run: python3 -m cython --version

      - name: Restore cogutil cache
        uses: actions/cache@v4
        with:
          path: cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-

      - name: Restore atomspace cache
        uses: actions/cache@v4
        with:
          path: atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-

      - name: Build and install cogutil
        run: |
          cd cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build and install atomspace
        run: |
          cd atomspace
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build Attention
        run: |
          cd attention
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)

      - name: Test Attention
        run: |
          cd attention/build
          make test || true

  # ==== Final Summary Job ====
  build-summary:
    runs-on: ubuntu-latest
    needs: [cogutil, atomspace, atomspace-storage, ure, pln, cogserver, spacetime, attention]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "🏗️  CogML CI Build Summary"
          echo "=========================="
          echo "cogutil: ${{ needs.cogutil.result }}"
          echo "atomspace: ${{ needs.atomspace.result }}"
          echo "atomspace-storage: ${{ needs.atomspace-storage.result }}"
          echo "ure: ${{ needs.ure.result }}"
          echo "pln: ${{ needs.pln.result }}"
          echo "cogserver: ${{ needs.cogserver.result }}"
          echo "spacetime: ${{ needs.spacetime.result }}"
          echo "attention: ${{ needs.attention.result }}"
          
          if [ "${{ needs.cogutil.result }}" = "success" ] && [ "${{ needs.atomspace.result }}" = "success" ] && [ "${{ needs.atomspace-storage.result }}" = "success" ]; then
            echo "✅ All core components built successfully!"
            exit 0
          else
            echo "❌ Some components failed to build"
            exit 1
          fi
