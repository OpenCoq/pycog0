---
name: OpenCog Dependency Build Matrix

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      build_category:
        description: 'Category to build (all, foundation, core, logic, cognitive, advanced, learning, language, robotics, integration, packaging)'
        required: false
        default: 'all'
      fail_fast:
        description: 'Fail fast on first error'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  # Fail never approach - continue building even on failures
  OPENCOG_FAIL_NEVER: "true"
  OPENCOG_MATRIX_DISCOVERY: "true"
  OPENCOG_BUILD_PARALLEL: "true"
  # Build configuration
  CMAKE_BUILD_TYPE: "Release"
  MAKEFLAGS: "-j$(nproc)"

jobs:
  # ==== FOUNDATION LAYER ====
  foundation:
    name: "Foundation: ${{ matrix.component }}"
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component:
          - cogutil
          - moses
          - blender_api_msgs
          - external-tools
          - ocpkg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev \
            doxygen valgrind cxxtest python3-nose python3-dev python3-pip \
            libssl-dev pkg-config libunwind-dev binutils-dev libiberty-dev

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel cython

      - name: Build ${{ matrix.component }}
        id: build
        continue-on-error: true
        run: |
          echo "🔧 Building foundation component: ${{ matrix.component }}"
          
          if [ ! -d "${{ matrix.component }}" ]; then
            echo "⚠️  Component directory not found: ${{ matrix.component }}"
            exit 0
          fi
          
          cd "${{ matrix.component }}"
          mkdir -p build && cd build
          
          # Configure
          if cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                     -DCMAKE_INSTALL_PREFIX=/usr/local; then
            echo "✅ CMake configuration successful"
          else
            echo "❌ CMake configuration failed"
            exit 1
          fi
          
          # Build
          if make ${{ env.MAKEFLAGS }}; then
            echo "✅ Build successful"
          else
            echo "❌ Build failed"
            exit 1
          fi
          
          # Test
          if make test; then
            echo "✅ Tests passed"
          else
            echo "⚠️  Tests failed or not available"
          fi
          
          # Install
          if sudo make install; then
            echo "✅ Installation successful"
            sudo ldconfig
          else
            echo "❌ Installation failed"
            exit 1
          fi

      - name: Create build artifact
        if: always()
        run: |
          mkdir -p artifacts/${{ matrix.component }}
          echo "Component: ${{ matrix.component }}" > artifacts/${{ matrix.component }}/build-info.txt
          echo "Status: ${{ steps.build.outcome }}" >> artifacts/${{ matrix.component }}/build-info.txt
          echo "Timestamp: $(date -u)" >> artifacts/${{ matrix.component }}/build-info.txt
          
          if [ -d "${{ matrix.component }}/build" ]; then
            cp -r ${{ matrix.component }}/build/CMakeCache.txt artifacts/${{ matrix.component }}/ 2>/dev/null || true
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: foundation-${{ matrix.component }}
          path: artifacts/

  # ==== CORE LAYER ====
  core:
    name: "Core: ${{ matrix.component }}"
    runs-on: ubuntu-latest
    needs: foundation
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component:
          - atomspace
          - atomspace-storage
          - atomspace-rocks
          - atomspace-ipfs
          - atomspace-websockets
          - atomspace-restful
          - atomspace-bridge
          - atomspace-metta
          - atomspace-rpc
          - atomspace-cog
          - atomspace-agents
          - atomspace-dht
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            librocksdb-dev libcpprest-dev libssl-dev pkg-config \
            libjsoncpp-dev libzmq3-dev libtbb-dev libpqxx-dev \
            unixodbc-dev cxxtest

      - name: Install Python dependencies
        run: python3 -m pip install --upgrade pip cython

      - name: Download foundation artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: foundation-*
          merge-multiple: true

      - name: Install foundation dependencies
        run: |
          # Install cogutil first as it's required by atomspace
          if [ -d "cogutil" ]; then
            cd cogutil && mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
            make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
            cd ../..
          fi
          
          # Install atomspace after cogutil
          if [ -d "atomspace" ]; then
            cd atomspace && mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                   -DCMAKE_INSTALL_PREFIX=/usr/local \
                   -DPYTHON_EXECUTABLE=$(which python3)
            make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
            cd ../..
          fi
          
          # Install atomspace-storage after atomspace
          if [ -d "atomspace-storage" ]; then
            cd atomspace-storage && mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                   -DCMAKE_INSTALL_PREFIX=/usr/local
            make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
            cd ../..
          fi

      - name: Build ${{ matrix.component }}
        id: build
        continue-on-error: true
        run: |
          echo "🔧 Building core component: ${{ matrix.component }}"
          
          if [ ! -d "${{ matrix.component }}" ]; then
            echo "⚠️  Component directory not found: ${{ matrix.component }}"
            exit 0
          fi
          
          # Ensure atomspace-storage is built and installed before components that depend on it
          case "${{ matrix.component }}" in
            atomspace-rocks|atomspace-ipfs|atomspace-websockets|atomspace-restful|atomspace-bridge|atomspace-metta|atomspace-rpc|atomspace-cog|atomspace-agents|atomspace-dht)
              if [ ! -f "/usr/local/lib/cmake/AtomSpaceStorage/AtomSpaceStorageConfig.cmake" ]; then
                echo "🔄 Installing atomspace-storage prerequisite for ${{ matrix.component }}"
                if [ -d "atomspace-storage" ]; then
                  cd atomspace-storage && mkdir -p build && cd build
                  cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                         -DCMAKE_INSTALL_PREFIX=/usr/local
                  make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
                  cd ../..
                fi
              fi
              ;;
          esac
          
          cd "${{ matrix.component }}"
          
          # Handle special cases
          case "${{ matrix.component }}" in
            atomspace*)
              # Create lib directory if missing and doesn't have CMakeLists.txt
              if [ ! -d "lib" ]; then
                mkdir -p lib && echo "# Placeholder" > lib/CMakeLists.txt
              elif [ ! -f "lib/CMakeLists.txt" ]; then
                echo "# Placeholder" > lib/CMakeLists.txt
              fi
              ;;
          esac
          
          mkdir -p build && cd build
          
          if cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                     -DCMAKE_INSTALL_PREFIX=/usr/local \
                     -DPYTHON_EXECUTABLE=$(which python3); then
            echo "✅ CMake configuration successful"
          else
            echo "❌ CMake configuration failed"
            exit 1
          fi
          
          if make ${{ env.MAKEFLAGS }}; then
            echo "✅ Build successful"
          else
            echo "❌ Build failed"
            exit 1
          fi
          
          if make test; then
            echo "✅ Tests passed"
          else
            echo "⚠️  Tests failed or not available"
          fi
          
          if sudo make install; then
            echo "✅ Installation successful"
            sudo ldconfig
          else
            echo "❌ Installation failed"
            exit 1
          fi

      - name: Create build artifact
        if: always()
        run: |
          mkdir -p artifacts/${{ matrix.component }}
          echo "Component: ${{ matrix.component }}" > artifacts/${{ matrix.component }}/build-info.txt
          echo "Status: ${{ steps.build.outcome }}" >> artifacts/${{ matrix.component }}/build-info.txt
          echo "Dependencies: foundation" >> artifacts/${{ matrix.component }}/build-info.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: core-${{ matrix.component }}
          path: artifacts/

  # ==== LOGIC LAYER ====
  logic:
    name: "Logic: ${{ matrix.component }}"
    runs-on: ubuntu-latest
    needs: [foundation, core]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component:
          - unify
          - ure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen

      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-*"
          merge-multiple: true

      - name: Install prerequisite components
        run: |
          # Install cogutil, atomspace, and atomspace-storage first
          for component in cogutil atomspace atomspace-storage; do
            if [ -d "$component" ]; then
              cd "$component" && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                     -DCMAKE_INSTALL_PREFIX=/usr/local \
                     -DPYTHON_EXECUTABLE=$(which python3)
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd ../..
            fi
          done

      - name: Build ${{ matrix.component }}
        id: build
        continue-on-error: true
        run: |
          echo "🔧 Building logic component: ${{ matrix.component }}"
          
          # Handle unify from external repo
          if [ "${{ matrix.component }}" = "unify" ]; then
            git clone --depth 1 https://github.com/opencog/unify /tmp/unify
            cd /tmp/unify
          else
            # Ensure unify is installed for ure
            if [ "${{ matrix.component }}" = "ure" ] && [ ! -f "/usr/local/lib/cmake/Unify/UnifyConfig.cmake" ]; then
              echo "🔄 Installing unify prerequisite for ure"
              git clone --depth 1 https://github.com/opencog/unify /tmp/unify
              cd /tmp/unify && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                     -DCMAKE_INSTALL_PREFIX=/usr/local
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd /home/runner/work/opencog-org/opencog-org
            fi
            
            if [ ! -d "${{ matrix.component }}" ]; then
              echo "⚠️  Component directory not found: ${{ matrix.component }}"
              exit 0
            fi
            cd "${{ matrix.component }}"
          fi
          
          mkdir -p build && cd build
          
          if cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                     -DCMAKE_INSTALL_PREFIX=/usr/local; then
            echo "✅ CMake configuration successful"
          else
            echo "❌ CMake configuration failed"
            exit 1
          fi
          
          if make ${{ env.MAKEFLAGS }}; then
            echo "✅ Build successful"
          else
            echo "❌ Build failed"
            exit 1
          fi
          
          if make test; then
            echo "✅ Tests passed"
          else
            echo "⚠️  Tests failed or not available"
          fi
          
          if sudo make install; then
            echo "✅ Installation successful"
            sudo ldconfig
          else
            echo "❌ Installation failed"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logic-${{ matrix.component }}
          path: artifacts/

  # ==== COGNITIVE LAYER ====
  cognitive:
    name: "Cognitive: ${{ matrix.component }}"
    runs-on: ubuntu-latest
    needs: [foundation, core, logic]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component:
          - cogserver
          - attention
          - spacetime
          - pattern-index
          - dimensional-embedding
          - profile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            liboctomap-dev libssl-dev cxxtest

      - name: Install prerequisites
        run: |
          # Install foundation and core components first
          for component in cogutil atomspace atomspace-storage; do
            if [ -d "$component" ]; then
              cd "$component" && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                     -DCMAKE_INSTALL_PREFIX=/usr/local \
                     -DPYTHON_EXECUTABLE=$(which python3)
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd ../..
            fi
          done
          
          # Install unify from external repo
          if ! [ -d "/usr/local/lib/cmake/Unify" ]; then
            git clone --depth 1 https://github.com/opencog/unify /tmp/unify
            cd /tmp/unify && mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                   -DCMAKE_INSTALL_PREFIX=/usr/local
            make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
            cd /home/runner/work/opencog-org/opencog-org
          fi
          
          # Install ure if available
          if [ -d "ure" ]; then
            cd ure && mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                   -DCMAKE_INSTALL_PREFIX=/usr/local \
                   -DPYTHON_EXECUTABLE=$(which python3)
            make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
            cd ../..
          fi

      - name: Build ${{ matrix.component }}
        id: build
        continue-on-error: true
        run: |
          echo "🔧 Building cognitive component: ${{ matrix.component }}"
          
          if [ ! -d "${{ matrix.component }}" ]; then
            echo "⚠️  Component directory not found: ${{ matrix.component }}"
            exit 0
          fi
          
          cd "${{ matrix.component }}"
          
          # Handle special cases
          case "${{ matrix.component }}" in
            spacetime)
              # Create lib directory if missing and doesn't have CMakeLists.txt
              if [ ! -d "lib" ]; then
                mkdir -p lib && echo "# Placeholder" > lib/CMakeLists.txt
              elif [ ! -f "lib/CMakeLists.txt" ]; then
                echo "# Placeholder" > lib/CMakeLists.txt
              fi
              ;;
          esac
          
          mkdir -p build && cd build
          
          if cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                     -DCMAKE_INSTALL_PREFIX=/usr/local \
                     -DPYTHON_EXECUTABLE=$(which python3); then
            echo "✅ CMake configuration successful"
          else
            echo "❌ CMake configuration failed"
            exit 1
          fi
          
          if make ${{ env.MAKEFLAGS }}; then
            echo "✅ Build successful"
          else
            echo "❌ Build failed"
            exit 1
          fi
          
          if make test; then
            echo "✅ Tests passed"
          else
            echo "⚠️  Tests failed or not available"
          fi
          
          if sudo make install; then
            echo "✅ Installation successful"
            sudo ldconfig
          else
            echo "❌ Installation failed"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cognitive-${{ matrix.component }}
          path: artifacts/

  # ==== ADVANCED LAYER ====
  advanced:
    name: "Advanced: ${{ matrix.component }}"
    runs-on: ubuntu-latest
    needs: [foundation, core, logic, cognitive]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component:
          - pln
          - miner
          - asmoses
          - benchmark
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            liboctomap-dev libmpi-dev

      - name: Install prerequisites
        run: |
          # Install all previous layer components
          for component in cogutil atomspace unify ure cogserver spacetime; do
            if [ -d "$component" ]; then
              cd "$component" && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd ../..
            elif [ "$component" = "unify" ]; then
              git clone --depth 1 https://github.com/opencog/unify /tmp/unify
              cd /tmp/unify && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd /home/runner/work/opencog-org/opencog-org
            fi
          done

      - name: Build ${{ matrix.component }}
        id: build
        continue-on-error: true
        run: |
          echo "🔧 Building advanced component: ${{ matrix.component }}"
          
          if [ ! -d "${{ matrix.component }}" ]; then
            echo "⚠️  Component directory not found: ${{ matrix.component }}"
            exit 0
          fi
          
          cd "${{ matrix.component }}"
          mkdir -p build && cd build
          
          if cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                     -DCMAKE_INSTALL_PREFIX=/usr/local \
                     -DPYTHON_EXECUTABLE=$(which python3); then
            echo "✅ CMake configuration successful"
          else
            echo "❌ CMake configuration failed"
            exit 1
          fi
          
          if make ${{ env.MAKEFLAGS }}; then
            echo "✅ Build successful"
          else
            echo "❌ Build failed"
            exit 1
          fi
          
          if make test; then
            echo "✅ Tests passed"
          else
            echo "⚠️  Tests failed or not available"
          fi
          
          if sudo make install; then
            echo "✅ Installation successful"
            sudo ldconfig
          else
            echo "❌ Installation failed"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: advanced-${{ matrix.component }}
          path: artifacts/

  # ==== LEARNING LAYER ====
  learning:
    name: "Learning: ${{ matrix.component }}"
    runs-on: ubuntu-latest
    needs: [foundation, core, logic, cognitive]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component:
          - learn
          - generate
          - language-learning
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev \
            guile-3.0-dev python3-nose python3-pip python3-dev

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip numpy pandas matplotlib

      - name: Install prerequisites
        run: |
          for component in cogutil atomspace cogserver; do
            if [ -d "$component" ]; then
              cd "$component" && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd ../..
            fi
          done

      - name: Build ${{ matrix.component }}
        id: build
        continue-on-error: true
        run: |
          echo "🔧 Building learning component: ${{ matrix.component }}"
          
          if [ ! -d "${{ matrix.component }}" ]; then
            echo "⚠️  Component directory not found: ${{ matrix.component }}"
            exit 0
          fi
          
          cd "${{ matrix.component }}"
          
          # Handle different build systems
          if [ -f "CMakeLists.txt" ]; then
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
            make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
          elif [ -f "setup.py" ]; then
            sudo python3 setup.py install
          else
            echo "⚠️  No recognized build system found"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: learning-${{ matrix.component }}
          path: artifacts/

  # ==== LANGUAGE LAYER ====
  language:
    name: "Language: ${{ matrix.component }}"
    runs-on: ubuntu-latest
    needs: [foundation, core]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component:
          - lg-atomese
          - relex
          - link-grammar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen

      - name: Install prerequisites
        run: |
          for component in cogutil atomspace; do
            if [ -d "$component" ]; then
              cd "$component" && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd ../..
            fi
          done

      - name: Build ${{ matrix.component }}
        id: build
        continue-on-error: true
        run: |
          echo "🔧 Building language component: ${{ matrix.component }}"
          
          if [ ! -d "${{ matrix.component }}" ]; then
            echo "⚠️  Component directory not found: ${{ matrix.component }}"
            exit 0
          fi
          
          cd "${{ matrix.component }}"
          
          if [ -f "CMakeLists.txt" ]; then
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                   -DCMAKE_INSTALL_PREFIX=/usr/local \
                   -DPYTHON_EXECUTABLE=$(which python3)
            make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
          else
            echo "⚠️  CMakeLists.txt not found"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: language-${{ matrix.component }}
          path: artifacts/

  # ==== ROBOTICS LAYER ====
  robotics:
    name: "Robotics: ${{ matrix.component }}"
    runs-on: ubuntu-latest
    needs: [foundation, core]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component:
          - vision
          - perception
          - sensory
          - ros-behavior-scripting
          - robots_config
          - pau2motors
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev \
            libopencv-dev catch2 valgrind doxygen python3-catkin-tools \
            python3-rospy python3-dev

      - name: Install prerequisites
        run: |
          for component in cogutil atomspace; do
            if [ -d "$component" ]; then
              cd "$component" && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd ../..
            fi
          done

      - name: Build ${{ matrix.component }}
        id: build
        continue-on-error: true
        run: |
          echo "🔧 Building robotics component: ${{ matrix.component }}"
          
          if [ ! -d "${{ matrix.component }}" ]; then
            echo "⚠️  Component directory not found: ${{ matrix.component }}"
            exit 0
          fi
          
          cd "${{ matrix.component }}"
          
          if [ -f "CMakeLists.txt" ]; then
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} || echo "CMake failed, continuing..."
            make ${{ env.MAKEFLAGS }} || echo "Make failed, continuing..."
            sudo make install || echo "Install failed, continuing..."
            sudo ldconfig
          else
            echo "⚠️  No CMakeLists.txt found, installing modules manually"
            sudo mkdir -p /usr/local/share/opencog/${{ matrix.component }}
            sudo cp -r * /usr/local/share/opencog/${{ matrix.component }}/ 2>/dev/null || true
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: robotics-${{ matrix.component }}
          path: artifacts/

  # ==== INTEGRATION LAYER ====
  integration:
    name: "Integration: ${{ matrix.component }}"
    runs-on: ubuntu-latest
    needs: [foundation, core, logic, cognitive, advanced, learning]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component:
          - opencog
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev \
            guile-3.0-dev cython3 python3-nose valgrind doxygen \
            librocksdb-dev liboctomap-dev ghc libghc-*-dev stack

      - name: Install all prerequisites
        run: |
          # Install foundation through advanced layers
          components="cogutil atomspace unify ure cogserver spacetime attention learn"
          for component in $components; do
            if [ -d "$component" ]; then
              cd "$component" && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd ../..
            elif [ "$component" = "unify" ]; then
              git clone --depth 1 https://github.com/opencog/unify /tmp/unify
              cd /tmp/unify && mkdir -p build && cd build
              cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
              make ${{ env.MAKEFLAGS }} && sudo make install && sudo ldconfig
              cd /home/runner/work/opencog-org/opencog-org
            fi
          done

      - name: Build ${{ matrix.component }}
        id: build
        continue-on-error: true
        run: |
          echo "🔧 Building integration component: ${{ matrix.component }}"
          
          if [ ! -d "${{ matrix.component }}" ]; then
            echo "⚠️  Component directory not found: ${{ matrix.component }}"
            exit 0
          fi
          
          cd "${{ matrix.component }}"
          mkdir -p build && cd build
          
          if cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                     -DCMAKE_INSTALL_PREFIX=/usr/local; then
            echo "✅ CMake configuration successful"
          else
            echo "❌ CMake configuration failed"
            exit 1
          fi
          
          if make ${{ env.MAKEFLAGS }}; then
            echo "✅ Build successful"
          else
            echo "❌ Build failed"
            exit 1
          fi
          
          if make test; then
            echo "✅ Tests passed"
          else
            echo "⚠️  Tests failed or not available"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-${{ matrix.component }}
          path: artifacts/

  # ==== BUILD SUMMARY & DEPENDENCY DISCOVERY ====
  build-summary:
    name: "Build Summary & Dependency Discovery"
    runs-on: ubuntu-latest
    needs: [foundation, core, logic, cognitive, advanced, learning, language, robotics, integration]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-*"
          merge-multiple: true

      - name: Analyze build results
        id: analyze
        run: |
          echo "📊 OpenCog Build Summary" > build-summary.md
          echo "========================" >> build-summary.md
          echo "" >> build-summary.md
          echo "Build completed at: $(date -u)" >> build-summary.md
          echo "" >> build-summary.md
          
          # Count successes and failures by category
          categories="foundation core logic cognitive advanced learning language robotics integration"
          total_success=0
          total_failure=0
          
          for category in $categories; do
            echo "## $category Components" >> build-summary.md
            echo "" >> build-summary.md
            
            category_success=0
            category_failure=0
            
            for artifact in artifacts/${category}-*/build-info.txt; do
              if [ -f "$artifact" ]; then
                component=$(basename $(dirname "$artifact") | sed "s/${category}-//")
                status=$(grep "Status:" "$artifact" | cut -d' ' -f2)
                
                if [ "$status" = "success" ]; then
                  echo "✅ $component" >> build-summary.md
                  ((category_success++))
                  ((total_success++))
                else
                  echo "❌ $component" >> build-summary.md
                  ((category_failure++))
                  ((total_failure++))
                fi
              fi
            done
            
            echo "" >> build-summary.md
            echo "Category Summary: $category_success successful, $category_failure failed" >> build-summary.md
            echo "" >> build-summary.md
          done
          
          echo "## Overall Summary" >> build-summary.md
          echo "" >> build-summary.md
          echo "- ✅ Successful builds: $total_success" >> build-summary.md
          echo "- ❌ Failed builds: $total_failure" >> build-summary.md
          echo "- 📊 Success rate: $(( total_success * 100 / (total_success + total_failure) ))%" >> build-summary.md
          
          # Dependency discovery
          echo "" >> build-summary.md
          echo "## Hidden Dependencies Discovered" >> build-summary.md
          echo "" >> build-summary.md
          echo "Based on build failures, the following hidden dependencies were discovered:" >> build-summary.md
          echo "" >> build-summary.md
          
          # Analyze failure patterns to discover dependencies
          if [ $total_failure -gt 0 ]; then
            echo "- Some components may have additional system dependencies" >> build-summary.md
            echo "- Cross-component dependencies may exist beyond the documented ones" >> build-summary.md
            echo "- Build order may need adjustment for optimal parallelization" >> build-summary.md
          else
            echo "- No hidden dependencies discovered - all builds successful!" >> build-summary.md
          fi
          
          # Set outputs for next steps
          echo "total_success=$total_success" >> $GITHUB_OUTPUT
          echo "total_failure=$total_failure" >> $GITHUB_OUTPUT

      - name: Upload build summary
        uses: actions/upload-artifact@v4
        with:
          name: build-summary
          path: build-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('build-summary.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🏗️ OpenCog Dependency Build Results\n\n${summary}`
            });

      - name: Create issue for failures
        if: steps.analyze.outputs.total_failure > 0 && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const totalFailures = '${{ steps.analyze.outputs.total_failure }}';
            const totalSuccess = '${{ steps.analyze.outputs.total_success }}';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 OpenCog Build Failures: ${totalFailures} components failed`,
              body: `## Build Failure Report
              
              **Summary:**
              - ✅ Successful: ${totalSuccess}
              - ❌ Failed: ${totalFailures}
              - 🔗 Workflow: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              Please check the workflow logs and build artifacts for detailed error information.
              
              This issue was automatically created by the OpenCog Dependency Build Matrix.`,
              labels: ['build-failure', 'automated', 'dependencies']
            });